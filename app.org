#+TITLE: App & Components


If you want a simple server, set it up in the =project.clj=. For now, we've just got what the devcards template suggests, and I made up some shitty data in a regular namespace.

** ns & deps

Gotta fix that thing where I'm requiring sablono.

 #+BEGIN_SRC clojure :tangle src/hyperlexia/core.cljs

 (ns hyperlexia.core
   (:require [sablono.core :as sab :include-macros true]
             [cljs.test :refer [testing is]]
             [cljs.spec :as s]
             [hyperlexia.item :as item]
             [rum.core :as rum :refer [defc]])
   (:require-macros
    [devcards.core :as dc :refer [defcard deftest]]))

 (enable-console-print!)

 #+END_SRC

** Components

First a test tweet with like, maybe the fields we use? Followed by an all-text component.

#+BEGIN_SRC clojure

  (defcard tweet-fields
    "At least, maybe"
  { :timestamp "2016-11-11"
            :user "MadeUpHuman"
            :id 1234123412341234
            :type :tweet
            :href "https://twitter.com/MadeUpMan/status/1234123412341234" } )

;; here was a component sketch when material-ui wasn't working (still isn't so far as i know)
  #_(defc tweet [pin]
    [:li (:user pin ) " | " [:a {:href (:href pin)} "tweet"] " | " " { first tag, second }" ]
    )



#+END_SRC




** main fn

   Note: I'm interested in trying =rum= out over =sablono= --- a mathematician doing work in science communcation & visualization spoke highly of it. So figure out the =rum= version of the below.

#+BEGIN_SRC clojure :tangle src/hyperlexia/core.cljs

(defn main []
  ;; conditionally start the app based on whether the #main-app-area
  ;; node is on the page
  (if-let [node (.getElementById js/document "main-app-area")]
    (.render js/ReactDOM (sab/html [:div "This is working"]) node)))

(main)

#+END_SRC


