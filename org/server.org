#+TITLE: Server-side Code


* Retrieving data from the Twitter.com corporation: Hacking the Gibson

 Bearing in mind tendency for the silk of the web to rot, and the relatively slimness of the volume of data we've flagged as worth consideration, we should really host this volume in our own databases. Because of restrictions on what browsers can do, this will have to be server-side code.

 References:
 -----------
 https://github.com/adamwynne/twitter-api
 http://nerd.kelseyinnis.com/blog/2014/05/06/talking-to-yourself-a-twitter-bot-in-clojure-by-a-total-newb/

** Our Server

I'm a little intrigued by juxt's =yada=, because it looks hella data-driven. But, it seems like data-driven works best when you have written the thing a million times and you know exactly what needs to be specified. Since I ain't all that, let's make a route-handler with =compojure= and tell =figwheel= about it in its configuration options. 

*** Configuration
    
Add dependencies to [[file:~/fire/hyperlexia/project.clj::;;%20%5Btwitter-api%20"0.7.8"%5D][project.clj]].

#+BEGIN_SRC clojure

[compojure "1.5.1"]

#+END_SRC

Tell figwheel about the server:

#+BEGIN_QUOTE

Configurations happens in your =project.clj= file and is separated into serverside configs =(:figwheel {...}= on your "root" level) and per-build, or client side, configs =(:cljsbuild {:builds [{:figwheel {...}}]})=.

-- https://github.com/bhauman/lein-figwheel/wiki/Configuration-Options

#+END_QUOTE

Hence, add

#+BEGIN_SRC clojure

:ring-handler 'hyperlexia.server/handler

#+END_SRC

to the =:figwheel= key in [[file:~/fire/hyperlexia/project.clj:::figwheel%20{%20:ring-handler%20'hyperlexia.server/handler%20}][project.clj.]] 

** DONE Smoke Test

#+BEGIN_SRC clojure :tangle no

  (ns hyperlexia.server
    (:require [compojure.core :refer :all]
              [compojure.route :as route]))

  (defroutes handler
    (GET "/hello" [] "<h1>Hello World</h1>")
    (route/not-found "<h1>Page not found</h1>"))

#+END_SRC

Yep.

** Routes & API calls

Namespace with =compojure= and =twitter-api= necessities in it.
   
#+BEGIN_SRC clojure :tangle ../src/hyperlexia/server.clj

  (ns hyperlexia.server
    (:require [compojure.core :refer :all]
              [compojure.route :as route])
    (:use
     [twitter.oauth]
     [twitter.callbacks]
     [twitter.callbacks.handlers]
     [twitter.api.restful])
    (:import
     (twitter.callbacks.protocols SyncSingleCallback)))

#+END_SRC

Q: Why does the author of =twitter-api= use =:use= instead of the more common =:require=? I'm following their example tho.

Routes needed:
- twitter/:id :: Get whatever data we want need for a particular tweet.
- twitter/favorites/:n :: Get the last n favorites for the authenticated user.
- twitter/user/:name :: Get whatever data we need for a particular user.

And we'll need functions for hitting the Twitter.com api routes that we want, with authentication in place. 

*** Authenticating

    We ask Twitter.com (out-of-band) to provide credentials for our app, and authenticate it with our private account. We take the four strings thus created, and put them into the environment (so that they don't end up in our source code, a security hole). There's a library to do this called =environ=, but for now I'm using =System/get-env= and a start script that loads the variables into the environment before starting =figwheel=.

 #+BEGIN_SRC clojure

   (def my-creds (let [get-env #(fn [name] (System/getenv name))
                       key (get-env "TWITTER_CONSUMER_KEY")
                       secret (get-env "TWITTER_CONSUMER_SECRET")
                       token (get-env "TWITTER_ACCESS_TOKEN")
                       secret-token (get-env "TWITTER_ACCESS_TOKEN_SECRET")]
                   (make-oauth-creds *app-consumer-key*
                                     ,*app-consumer-secret*
                                     ,*user-access-token*
                                     ,*user-access-token-secret*)))

 #+END_SRC

*** API: map Twitter.com url to command name

#+BEGIN_QUOTE

All of the functions follow Twitter's naming conventions; we convert a resource's path into the function name. For example:

- https://api.twitter.com/1.1/account/settings is available as =account-settings=
- https://api.twitter.com/1.1/statuses/update_with_media is available as =statuses-update-with-media=
- 
Parameters are uniform across the functions. All calls can accept:

- :oauth-creds is the result of the make-oauth-creds function.
- :params is a map of parameters to pass, eg, list_id=123 would be {:list-id 123}
- :headers adds or overrides any of the request headers sent to Twitter.
- :verb overrides the HTTP verb used to make the request, for resources that support it (eg, account-settings)
- :callbacks attaches a custom callback to the request.

#+END_QUOTE

Soooo hm. If I look up the resource paths for the methods I want.... 

**** Get status by id
https://api.twitter.com/1.1/statuses/show.json
with param =id=

becomes

#+BEGIN_SRC clojure
(statuses-show {:id ...}) 

#+END_SRC

and there are a couple other params you might care about later.

**** Get a number of favorites
https://api.twitter.com/1.1/favorites/list.json
with param count

becomes

#+BEGIN_SRC clojure

(favorites-list {:count ...})

#+END_SRC

**** Get information about a user
https://api.twitter.com/1.1/users/lookup.json
with params screen-name or user-id

becomes

#+BEGIN_SRC clojure

(users-lookup { :user-id ... :screen-name ...})

#+END_SRC

probably.

*** API API: map routes to functions
**** Wiring it together
Name some fns:

#+BEGIN_SRC clojure :tangle ../src/hyperlexia/server.clj

   (defn tweet-by-id [id]
     (str "tweet no. " id))

   (defn some-faves [n]
     (str n " tweets"))

   (defn user-by-name [name]
     (str "user " name))

#+END_SRC

 Finally, write the handler. 

#+BEGIN_SRC clojure :tangle ../src/hyperlexia/server.clj

     (defroutes handler
       (GET "/twitter/:id" [id] (tweet-by-id id))
       (GET "/twitter/favorites/:n" [n] (some-faves n))
       (GET "/twitter/faves/:n" [n] (some-faves n))
       (GET "/twitter/likes/:n" [n] (some-faves n))
       (GET "/twitter/user/:name" [name] (user-by-name name))
       (route/not-found "<h1>Page not found</h1>"))

#+END_SRC



** Calling the server from the client
