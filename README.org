#+TITLE: Hyperlexia

readme driven development

** Starting decisions
*** Language
    ClojureScript / Clojure.

    *How come?* Functions! They're a left-module of vars acting on data! Fun to write!

*** Dependencies
    React via Rum.

    *How come?* It is the smallest React wrapper that I'm aware of. It is used and recommended by a mathematician doing information visualization work for the public (see, Communicating Risk talk). It is intended to be compatible with DataScript, which is a pattern of interest for me. 

** Data Sources

*** 1. A list of tweets from one day in November 

Here's a bonehead data source to start with: I just opened my 'likes' page and copied all the tweets I'd liked (the intent being, mostly to save but occasionally to signal) into this list here:

#+BEGIN_SRC txt :tangle resources/data/likes_late_november.txt

https://twitter.com/ekstasis/status/801004674035970048
https://twitter.com/leashless/status/801014346474135552
https://twitter.com/KBSpangler/status/801081463902969856
https://twitter.com/dynamicsymmetry/status/801083674221510656
https://twitter.com/whispersystems/status/801091427564294144
https://twitter.com/quinnnorton/status/801102736049770496
https://twitter.com/Lexialex/status/801110335868411904
https://twitter.com/WrrrdNrrrdGrrrl/status/801111655824273408
https://twitter.com/minhyoungsong/status/801120653726384129
https://twitter.com/newinquiry/status/801123097092833280
https://twitter.com/planetlabs/status/801127974745481216
https://twitter.com/kissane/status/801133298785329152
https://twitter.com/hautepop/status/801138208230744064
https://twitter.com/hautepop/status/801138747907731458
https://twitter.com/cnqmdi/status/801139470082985984
https://twitter.com/dunagan23/status/801139777210843140
https://twitter.com/mathpunk/likes
https://twitter.com/KevinCarson1/status/800905914123481088
https://twitter.com/TheViewFromLL2/status/800907771101270016
https://twitter.com/DevonAkmon/status/800907938412064768
https://twitter.com/familyunequal/status/800911127752249344
https://twitter.com/TheViewFromLL2/status/800914024686874633
https://twitter.com/abditum/status/800920210081345536
https://twitter.com/garrettlisi/status/800921787361918976
https://twitter.com/realscientists/status/800921883340214272
https://twitter.com/susie_c/status/800923877849210880
https://twitter.com/alan_uplc/status/800927192683266048
https://twitter.com/denormalize/status/800927743323930624
https://twitter.com/b0rk/status/800928953691230208
https://twitter.com/joanwalsh/status/800932791458394113
https://twitter.com/realscientists/status/800935368094646273
https://twitter.com/MLCzone/status/800943210885513216
https://twitter.com/jimacmcdermott/status/800949917413801984
https://twitter.com/jeffjarvis/status/800950687416913924
https://twitter.com/GeraldFitt/status/800951041424359424
https://twitter.com/TessFowler/status/800952814314733568
https://twitter.com/carolinesinders/status/800953107077218305
https://twitter.com/ameliaabreu/status/800953388993122304
https://twitter.com/daisykpgardner/status/800961932752629760
https://twitter.com/justinpickard/status/800970162413387776
https://twitter.com/livingarchitect/status/800971854504751104
https://twitter.com/starsandrobots/status/800868628811812865
https://twitter.com/HeerJeet/status/800874083369897984
https://twitter.com/KatrinaNation/status/800877980545417216
https://twitter.com/nytmedia/status/800878423010930689
https://twitter.com/leahmcelrath/status/800878498453680128
https://twitter.com/Freeyourmindkid/status/800878733850722304
https://twitter.com/pbump/status/800878833570353157
https://twitter.com/rechelon/status/800879070623862784
https://twitter.com/alyssaharad/status/800881281932226560
https://twitter.com/sarahkendzior/status/800881494524882944
https://twitter.com/moonandserpent/status/800881567119732738
https://twitter.com/alyssaharad/status/800887571232473088
https://twitter.com/ta_shepard/status/800889586465374208
https://twitter.com/anthoknees/status/800889593994194944
https://twitter.com/jessamyn/status/800894360686563328
https://twitter.com/tealtan/status/800894558578049024
https://twitter.com/lisarokusek/status/800896670296932354
https://twitter.com/robotnik/status/800896683676614656
https://twitter.com/FrankPasquale/status/800898688574951424
https://twitter.com/metasj/status/800899196031221760
https://twitter.com/inllhrprhntr/status/800899495726813184
https://twitter.com/BrendanNyhan/status/800899559006359552
https://twitter.com/FrankPasquale/status/800900595414659072
https://twitter.com/JYSexton/status/800900750717108224
https://twitter.com/Chris_arnade/status/800901419389820928
https://twitter.com/mulegirl/status/800902587079766016
https://twitter.com/fatneckbeardguy/status/800808669868765184
https://twitter.com/splcenter/status/800808843370463232
https://twitter.com/B_Meson/status/800809125911363585
https://twitter.com/B_Meson/status/800809566850035712
https://twitter.com/aurabogado/status/800809653902811137
https://twitter.com/jesseberney/status/800810510199439361
https://twitter.com/daveweigel/status/800811844025860096
https://twitter.com/BostonJoan/status/800812459074338816
https://twitter.com/paddyhirsch/status/800812742424702976
https://twitter.com/FrankLuntz/status/800813103210381314
https://twitter.com/KevinCarson1/status/800814453512142856
https://twitter.com/summerbrennan/status/800816425057341440
https://twitter.com/joemacare/status/800817149895905280
https://twitter.com/Vanessid/status/800817431627251712
https://twitter.com/sparksjls/status/800819554981212160
https://twitter.com/levendowski/status/800820929928560640
https://twitter.com/cascadiawillem/status/800821256190771200
https://twitter.com/queerbirdnerd/status/800822973078892549
https://twitter.com/malki/status/800824327570538497
https://twitter.com/mjg59/status/800826894325202946
https://twitter.com/JohnDuda/status/800827129252364291
https://twitter.com/ryanpitts/status/800829470047289344
https://twitter.com/MinovskyArticle/status/800829751069999105
https://twitter.com/DavidColeGtown/status/800830222228738048
https://twitter.com/JWMason1/status/800831233341136897
https://twitter.com/HeerJeet/status/800831872808861697
https://twitter.com/umairh/status/800832364398002176
https://twitter.com/waxy/status/800836178454855691
https://twitter.com/Voldemort4Mayor/status/800836899837542404
https://twitter.com/PixelRickie/status/800836936743075841
https://twitter.com/sarahwhelmed/status/800837399303647237
https://twitter.com/cnqmdi/status/800837894956908544
https://twitter.com/nntaleb/status/800838839942205443
https://twitter.com/leashless/status/800838847705862144
https://twitter.com/prisonculture/status/800839258596462592
https://twitter.com/fchollet/status/800839790480363521
https://twitter.com/miniver/status/800840242622119936
https://twitter.com/delight_monger/status/800840388512620544
https://twitter.com/prisonculture/status/800841193240358912
https://twitter.com/prisonculture/status/800841697726894080
https://twitter.com/AAIHS/status/800841977373818880
https://twitter.com/zunguzungu/status/800842187881619456
https://twitter.com/spring_el/status/800842249625997312
https://twitter.com/PaulLewis/status/800842977123782656
https://twitter.com/harrisj/status/800843178878312449
https://twitter.com/harrisj/status/800843387574177792
https://twitter.com/Wolven/status/800843753883914240
https://twitter.com/janeosanders/status/800844649107701760
https://twitter.com/Pinboard/status/800844930570555392
https://twitter.com/miniver/status/800846649761218561
https://twitter.com/tezcatlipoca/status/800847180231688192
https://twitter.com/ubiquity75/status/800848413029896192
https://twitter.com/lifewinning/status/800849589473517568
https://twitter.com/hautepop/status/800849753290444800
https://twitter.com/MuslimIQ/status/800853994046271488
https://twitter.com/jongold/status/800862562296336384
https://twitter.com/jessevondoom/status/800863722088448002
https://twitter.com/futurebird/status/800787825302061056
https://twitter.com/futurebird/status/800788036774690817
https://twitter.com/ShaunKing/status/800788493119066112
https://twitter.com/TheSoundDefense/status/800788581379936256
https://twitter.com/NateMing/status/800788721687621632
https://twitter.com/drewesthaus/status/800788893796732930
https://twitter.com/katecrawford/status/800789503271047168
https://twitter.com/jessevondoom/status/800789556236795904
https://twitter.com/DeborahGraywine/status/800789747006246914
https://twitter.com/samim/status/800789778337763329
https://twitter.com/samim/status/800791152249212928
https://twitter.com/evacide/status/800791157538050048
https://twitter.com/judithd/status/800791160331509760
https://twitter.com/TheLitCritGuy/status/800791233866166272
https://twitter.com/magicbeans/status/800791452041158656
https://twitter.com/kombiz/status/800791593649324032
https://twitter.com/tressiemcphd/status/800792170651418624
https://twitter.com/TUSK81/status/800792549124231168
https://twitter.com/XipiterSec/status/800792571098251264
https://twitter.com/derekwillis/status/800793135408447488
https://twitter.com/tressiemcphd/status/800794549991997442
https://twitter.com/courtinnovation/status/800794667386142720
https://twitter.com/courtinnovation/status/800794667386142720
https://twitter.com/surlyurbanist/status/800796814739804160
https://twitter.com/peterwsinger/status/800797434259509248
https://twitter.com/plussone/status/800797878801207296
https://twitter.com/electionland/status/800798458915524608
https://twitter.com/audreywatters/status/800799782239277056
https://twitter.com/zeynep/status/800801825846870017
https://twitter.com/FreeLawProject/status/800802417436569600
https://twitter.com/radfagg/status/800802531400105984
https://twitter.com/RonWyden/status/800802627059585030
https://twitter.com/prisonculture/status/800802745464786948
https://twitter.com/Horse_Crimes/status/800802819720839168
https://twitter.com/zeynep/status/800802909470543872
https://twitter.com/dakami/status/800803333720018945
https://twitter.com/_SecurityFirst/status/800803514926542848
https://twitter.com/TomSugrue/status/800804174363525120
https://twitter.com/mister_borogove/status/800804231905054721
https://twitter.com/mister_borogove/status/800804507928051712
https://twitter.com/OJutel/status/800805269143851008
https://twitter.com/KevinCarson1/status/800806873335144449
https://twitter.com/SenSanders/status/800807231449169920
https://twitter.com/borzou/status/800807508625526784
https://twitter.com/carlacasilli/status/800807758786220032
https://twitter.com/Interdome/status/800807937019027457
https://twitter.com/Interdome/status/800808344097210369
https://twitter.com/Eclectablog/status/800338989731446784
https://twitter.com/JustSchmeltzer/status/800363859060125696
https://twitter.com/thesarahhunt/status/800397865474355200
https://twitter.com/AlexSteffen/status/800402070159257600
https://twitter.com/AlexSteffen/status/800403340882427904
https://twitter.com/robreiner/status/800516953961959424
https://twitter.com/Chronotope/status/800533359495643136
https://twitter.com/AdamParkhomenko/status/800534977142280193
https://twitter.com/OaklandElle/status/800645469080731648
https://twitter.com/DRMacIver/status/800646611462459392
https://twitter.com/Asher_Wolf/status/800648410671915008
https://twitter.com/SoffiyahElijah/status/800664815538700288
https://twitter.com/PostRoz/status/800694688844017664
https://twitter.com/fawfulfan/status/800702370292371456
https://twitter.com/nkjemisin/status/800709646558367744
https://twitter.com/tinaissa/status/800711944109862912
https://twitter.com/blprnt/status/800741307228491776
https://twitter.com/CaseyG/status/800741770107592704
https://twitter.com/anne_theriault/status/800748091854950402
https://twitter.com/asthesparksfly/status/800760957622484992
https://twitter.com/speechboy71/status/800762912923156481
https://twitter.com/doriantaylor/status/800765623332540416
https://twitter.com/sarahkendzior/status/800768426402664448
https://twitter.com/HeardFC/status/800768981661585409
https://twitter.com/mateagold/status/800777798134566912
https://twitter.com/MazMHussain/status/800778249483812866
https://twitter.com/jacremes/status/800780273801687040
https://twitter.com/cashmusic/status/800780285373648896
https://twitter.com/jbouie/status/800782968482570241
https://twitter.com/navahw/status/800783124141580288
https://twitter.com/Interdome/status/800784002432962561
https://twitter.com/AngieCoiro/status/800784600712679428
https://twitter.com/robyncaplan/status/800784984919437312
https://twitter.com/vogon/status/800785255217016832
https://twitter.com/OaklandElle/status/800787060688764928
https://twitter.com/HalpernAlex/status/800787225642340356
https://twitter.com/suzettesmith/status/800787550218555401

#+END_SRC

What can I say about this data? 

Its transformation should yield a set --- duplicates don't mean anything. 

This was a pretty serious Nazi week after the election, so the vast majority represent me saving reports, analyses, and recommended actions to take in the face of less than 70 days to inauguration. Of those, some of them are threads that represent a conversation's worth of information that I would like to pass on and/or respond to; others are all the way to suggestions for action on getting faithless electors to do their job and not elect someone who is flaunting norms and laws left and right, someone for whom there may be some credible evidence that there was hacks and fraud and idk what else; there are templates and lists for how and who to call to resist, to #NonServiam; some are mere inspiration. Of the rest, there are "I see you" faves that need nothing further but could be recorded as an instance of human feelings between humans, you monster; there are pictures and comics and such that are of brief 'heh' or are of use in the ol' emergency GIFs folder; there are books to order and read, there are connections between the national scene and the environmental racism at the Flint or Standing Rock level...

So anyway, this is a mess that is hard to look at. And yet it's important that you not look away. So can your writer's prosthesis 1) help you get a grasp on what this kind of outpouring of fear, despair, and hope can mean, and 2) get you moving on writing & action that can help? 

*** 2. Recent likes
Can you use the API to get at a list of your recent likes? 

*** 3. All Pins
There is an http method that will get you all of your links saved to Pinboard. They are not all tweets, but they are mostly tweets. The difference from the above lists are, these are tweets that sometimes have already been labeled with keywords.

** The Intended Workflow

My goal is to be able to open these, glance over them, and classify them by way of a few keywords. 

Once classified, the next goal is to use the keywords, and structures derived from keywords and sets of keywords, to pile your links into little piles of meaning. Those piles, you would also like to be able to reorder them (piles as linear) and to spread them out into patterns (piles as collections which can be spread into a board). 

It's a bit like defragging: the churn of twitter turned into collections that may be thought of in aggregate, in such a way as to become constellatory for pitches & writings. 

** specs

item
::item "Something that may be identified."
::pin
::tweet keys 
::tagged keys tags and tags set or string but neither empty
::file keys path hash

keyword
::up-set
::down-set
::singleton
::concept
::concept-lattice

routes
::?


item
::item "Something that may be identified."
::pin
::tweet keys 
::tagged keys tags and tags set or string but neither empty
::file keys path hash

keyword
::up-set
::down-set
::singleton
::concept
::concept-lattice

routes
::?

By example:

#+BEGIN_SRC clojure

(def email-regex #"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$")
(s/def ::email-type (s/and string? #(re-matches email-regex %)))

(s/def ::acctid int?)
(s/def ::first-name string?)
(s/def ::last-name string?)
(s/def ::email ::email-type)

(s/def ::person (s/keys :req [::first-name ::last-name ::email]
                        :opt [::phone]))
#+END_SRC

** UI Components

   There must be a tweet component, with a text input field attached to enter in keywords. Upon exit from the input field, an update for the tweet's labels should be persisted.

   A selection of tweets. Say, 10, for not getting overwhelmed.
   It would be nice to be able to collect threads. But threads are a mess on twitter.

   Option to show only unlabeled tweets.
Option to show tweets labeled with some keyword or subset of keywords. 
Note: We will consider an item labeled with A, B and C to also be labeled with, say, B and C. A set of keywords given should retrieve the up-sets, though after the exact matches, and perhaps it also shows the downsets. 

*** Specifying ui components

 Here's an example from Juxt, wherein they use spec to define their data entities more precisely. That way they have better tooling around generating example data to see if their UI is getting out of whack. 

 #+BEGIN_SRC clojure

 (require '[sablono.core :as sab :include-macros true])
 (require '[cljs.spec :as s :include-macros true])

 (s/def :todo/title (s/and string? (complement str/blank?)))
 (s/def :todo/completed boolean?)
 (s/def :todos/item (s/keys :req [:todo/title :todo/completed]))
 (s/def :todos/list (s/coll-of :todos/item))
 (s/def :todos/showing #{:all :active :completed})
 (s/def :todos/view (s/keys :req [:todos/list :todos/showing]))

 (defn item [{:keys [todo/title todo/completed todo/editing]}]
   (let [class (cond-> ""
                       completed (str "completed ")
                       editing (str "editing"))]
     (sab/html
       [:li {:className class}
        [:div.view
         [:input.toggle {:type     "checkbox"
                         :checked  (and completed "checked")
                         :onChange #(do %)}]
         [:label title]
         [:button.destroy]
         [:input.edit {:ref "editField"}]]])))

 (defn todos [{:keys [todos/list todos/showing]}]
   (let [active (count (remove :todo/completed list))
         completed (- (count list) active)
         checked? (every? :todo/completed list)]
     (sab/html
       [:div#content
        [:div#todoapp
         [:header#header
          [:h1 "Todos"]
          [:input {:ref         "newField"
                   :id          "new-todo"
                   :placeholder "What needs to be done?"
                   :onKeyDown   #(do %)}]]
         [:section#main {:style (hidden (empty? list))}
          [:input#toggle-all {:type     "checkbox"
                              :onChange #(do %)
                              :checked  checked?}]
          (into [:ul#todo-list]
                (for [todo (filter (case showing
                                     :completed :todo/completed
                                     :active (complement :todo/completed)
                                     :all identity) list)]
                  (item todo)))]
         [:footer#footer {:style (hidden (empty? list))}
          [:span#todo-count
           [:strong active] (str " " (pluralize active "item") " left")]
          (into [:ul#filters {:className (name showing)}]
                (for [[x y] [["" "All"] ["active" "Active"] ["completed" "Completed"]]]
                  [:li [:a y]]))
          [:button#clear-completed (str "Clear completed (" completed ")")]]]])))

 #+END_SRC

**** Data, Interface, Action, Render
  https://juxt.pro/blog/posts/generative-ui-clojure-spec.html

  #+BEGIN_QUOTE

  *Data* and *Interface* are mostly explorative and declarative part of you codebase. You _define_ a data model that suits your business needs. You _explore_ what native calls you need to make in order to show the interface you want.

  *Action* refers to all the code you use to modify the state in response to an external event. As the application grows in complexity, take some time to keep this code clean and you’ll see is going to look mostly functional and easy to test.

  My main source of pain, you’ve probably have guessed, is the *Render* code.

  #+END_QUOTE

  "Define a data model that suits your needs"

  href
  tags

  destruct-tweet-href

  render-tweet
  it's got href s.t. it destructures
  get tweet by id (server call)

  render-tweets
  it's a seq
  each item is a tweet

  the tags get associated to the tweet in the db
  the freetext of the tweet gets into the db
  by way of the href we get the user too
  there is other data about a tweet from the api




 



*** Tweet component

 tweet
   user
   link
   text
   tag-field
   tag


 #+BEGIN_SRC clojure

   (defc tweet [{:keys [user id]}]
     "A simple view of a tweet that you can click and read using usual browser, and that you can add tags to."
     [:div.tweet
      [:span.user user]
      [:span.tweet-link [:a {:href (str "https://twitter.com/" user "/status/" id)} "follow link"]]
      [:span.tag-field "first tag, second tag"]])

 #+END_SRC

 This is not great. You'll want to handle the tag-field separately, so that you can do the autocomplete at some point. 

 #+BEGIN_SRC clojure

   (defc tag-field [tags]
     "Takes a possibly empty set of tags, will eventually have autocomplete."
     [:input {:type "text" :value (clojure.string/join tags " ")}])

 #+END_SRC
  
 (Surely there's a nice React autocomplete out there, but let's build our own stuff as much as possible rather than getting wrapped up in interoperating with other components.)

 You'll also want to aggregate.

 #+BEGIN_SRC clojure

   (defc feed [items]
     "A collection of potentially salient items that the user should review."
     (map tweet items))

 #+END_SRC




*** Read-Write-Recur

    I want my app to remind me of things that I'm in the process of reading and annotating, as well as encourage me to process my pins by adding keywords & lanes.

#+BEGIN_SRC clojure

  {
   :favorites [
               { :title "Ecology of Beauty and Strong Drink"
                :desc "Hybridization, sexual selection, freaks and weirdos, clearcutting response. Life sciences of information and culture. Infodruidism."
                :keywords "bio, dru1d, memetics, information, cyborgs"
                :uri ""},

               { :title "Quantum Techniques for Stochastic Mechanics"
                :keywords "mathematics, processes, statistics, numerical methods, linear algebra, graphical linear algebra, vector spaces"
                :uri ""}

               {:title "Manifestly Haraway"
                :type "print"
                :desc "Nature vs machines as a border war? Let's queer that. Like in Tory Amos's _The Red Baron_, in which two people get confused about 'sides' and sleep with the so-called enemy."}
    ]

   :likes [
           "November 21, 2016"
           "Recent"
           "All"
           ]
   }
#+END_SRC

Likes? Those are things that you need to process.
Favorites? Those are things that you want to read and re-read and generate material from, because they are so good that you want to have written them, that you want them inside your all*.
*** Style: Material Design

I've had trouble getting Material Design to load. I'm doing something wrong -- I'll limp along without it for a while, see if maybe I'm screwing up the stylesheets in the index.html, and then if I can't get anywhere, ask Rob for a review. 

*** localStorage
 just a note that this worked

 #+BEGIN_SRC clojure

   (.setItem js/localStorage
             "likes" "data/likes_late_november.txt")

   (println (.getItem js/localStorage "likes"))

 #+END_SRC

 except that i didn't want to store a string, i wanted what was in the path that string represented, and then i solved my problem another way.

** The Server

- Serve the app itself, with its recur data
- Search db for pins matching keywords, up-sets of keywords, down-sets of keywords
- Retrieve tweet by status ID
  - Cached?
  - Else, fetch
- Retrieve bio of twitter user
  - cached? else, fetch
- Retrieve total vocabulary of keywords
- Retrieve pin by id
- Retrieve recent likes
  - to the point of having all likes? that'd be cool
- Get follows, followers of Twitter user

*** Initializing the server
    Put 

  #+BEGIN_SRC clojure

  :ring-handler hyperlexia.server/handler

  #+END_SRC

  in the obvious place in your project.clj.

Something from juxt called =yada= claims to do http in the most right way. It looks like it might simplify away a lot of config I don't understand for Ring. Worth a shot, though it may straight up not be a ring handler and therefore be too complex for figwheel's basic http. 

#+BEGIN_SRC clojure

      [yada "1.1.44"]
      [aleph "0.4.1"]

#+END_SRC


Okay, can you hello a world? 

  #+BEGIN_SRC clojure :tangle src/hyperlexia/server.clj
    (ns hyperlexia.server
      (:require [yada.yada :as yada]))

    (def handler
      (yada/handler
       {:methods
        {:get
         {:produces "text/html"
          :response "<h1>Hello World!</h1>"}}})


  #+END_SRC

Necessary server functions:
- Talking with twitter (no CORS)
- Reading local documents into models.
  - results of Pinboard All
  - journal files
  - notes files (titled)
  - scroll files (uuid'd)

You know you might want to consider a uuid to be a 'title' just one that doesn't mean anything in and of itself. After all the file system insists on title uniqueness. 

*** Working with Twitter
Fuck, OAuth! Don't be scared. Look at an example. 

here's a second example if the below doesn't make sense: http://nerd.kelseyinnis.com/blog/2014/05/06/talking-to-yourself-a-twitter-bot-in-clojure-by-a-total-newb/

[twitter-api "0.7.8"]

#+BEGIN_SRC clojure

(ns mynamespace
  (:use
   [twitter.oauth]
   [twitter.callbacks]
   [twitter.callbacks.handlers]
   [twitter.api.restful])
  (:import
   (twitter.callbacks.protocols SyncSingleCallback)))

(def my-creds (make-oauth-creds *app-consumer-key*
                                *app-consumer-secret*
                                *user-access-token*
                                *user-access-token-secret*))

; simply retrieves the user, authenticating with the above credentials
; note that anything in the :params map gets the -'s converted to _'s
(users-show :oauth-creds my-creds :params {:screen-name "AdamJWynne"})

; supplying a custom header
(users-show :oauth-creds my-creds :params {:screen-name "AdamJWynne"} :headers {:x-blah-blah "value"})

; shows the users friends
(friendships-show :oauth-creds my-creds
                  :params {:target-screen-name "AdamJWynne"})

; use a custom callback function that only returns the body of the response
(friendships-show :oauth-creds my-creds
                  :callbacks (SyncSingleCallback. response-return-body
                                                  response-throw-error
                                                  exception-rethrow)
          :params {:target-screen-name "AdamJWynne"})

; post a text status, using the default sync-single callback
(statuses-update :oauth-creds my-creds
                 :params {:status "hello world"})

; upload a picture tweet with a text status attached, using the default sync-single callback
(statuses-update-with-media :oauth-creds *creds*
                            :body [(file-body-part "/pics/test.jpg")
                                  (status-body-part "testing")])

#+END_SRC

All of the functions follow Twitter's naming conventions; we convert a resource's path into the function name. For example:

https://api.twitter.com/1.1/account/settings is available as account-settings
https://api.twitter.com/1.1/statuses/update_with_media is available as statuses-update-with-media

Parameters are uniform across the functions. All calls can accept:

:oauth-creds is the result of the make-oauth-creds function.
:params is a map of parameters to pass, eg, list_id=123 would be {:list-id 123}
:headers adds or overrides any of the request headers sent to Twitter.
:verb overrides the HTTP verb used to make the request, for resources that support it (eg, account-settings)
:callbacks attaches a custom callback to the request.

*** Working with MongoDB
(Note: Rethink is nice but Mongo is very common so what the heck. Also it's weird to use Changefeeds in an immutable language so, I'll stick with something a little more basic.)

** Intriguing Prior Art
http://blog.yhat.com/posts/words2map.html

Words2map is kinda what I'm trying to do, I might ust be able to use their shit, but also, it makes sense to apply to this place since they are trying to overlap passions, i.e., they are doing topic modeling and I could help with that or at least have some opinions about it. 
** Hopes and Fears

*** One node in the global frequency

 Imagine a sum of frequencies and codes....
** <2016-11-23 Wed> After some designing on paper

I have taken photos of the designs. They would be agood additions to your page. They might need to be cleaned with CamScan and with inkscape or whatever. 

But that said. 

> Rum is simple, about 900 lines. But it won't teach you to make apps.

I can tell that there are new architectures that are going to get built. I don't have the expertise to evaluate which are going to succeed in what circumstances. So I've split up my concerns into roughly isolated areas:

- the front end, (or the _display_ might be a better term);
- the user environment (the abstract 'where' that someone does their work);
- actions;
- storage, 

and then I thought about the complete graph on four vertices, identifying the vertices and these concerns. 

*Front End, Storage.* If the front end is to render anything it must be able to fetch it. That might be from localStorage or indexedDb, it might be from a DataScript database, it might be a REST call. 

First impression: =localStorage= is just a property in =Window= that you are free to assign to. Its limitation is that you can only have 5MB. But we are a text app, so we can probably just use that. (Note: I looked up that 5MB in characters is about 1400 pages.) IndexedDB sounds like the cool new more complex thing that is more power than we need and requires setting up a connection. DataScript/Rum apps look cool. REST is perhaps too old and too RPC-like for this -- might want to send all the data inside the server-rendered page set to Window.localStorage, and save the server calling for events. (CQRS!)

*Front End, Actions.* The types of user input (things that add data, things that reduce, expand, or change the viewed selection) must be defined and named. Front end uses actions to emit commands to the CQRSystem. 

*Actions, Store.* The store must accept commands as well as queries. The actions don't care how they are stored. 

*Front End, User Environment.* A chronic frustration is the difference between the very full-featured and hella optimized environment you can design on your local Arch machine --- your text editor, your backup strategies, presence or absence of notifications, that kind of thing --- and the pretty (and standards-compliant) pages you can make in a browser but cannot interact with as optimally. (I like my keyboard shortcuts ok.) 

The tack I'm going to take is, use the web app for Reading and Marking, and using the local environment for Composing. This means I'm going to want a way to, having developed a board that I like and want to compose from, ship it / a url to it / both to a file that I can interact with locally. I think this means I just mint urls for boards, and provide a share link so that I can copy it into my text editor? 

*User Environment, Store.* I saw a demo by RTFeldman of something he called Dreamwriter. It was an offline-first app. It permitted file downloading --- that makes me think of, something that you wake up and check out in the morning, and when you've done some marking and reading, you can generaate a composition URL to refer to but you can also download a formatted text file for editing into whatever piece you've decided to work on. I don't really know. 

*User Environment, Actions.* Something like a 'begin composition' action, which kicks you from the open-mode browsing around of things to read and things to associate into a mode where you know what board you're working on and you've got something to get started. 

++

That notion of the architecture makes a degree of sense, but my entry point given what I am most interested in learning is the front end, and a data-first-or-early approach. 

NEXT TIME: 
- include material design
- Make a tweet card out of that material
- Figure out how you're going to get at your November 21st data

UX REVIEW:
Link to twitter should open in new tab and follow it. 
